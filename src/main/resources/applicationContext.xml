<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">


    <!-- 引入数据源properties文件 -->
    <context:property-placeholder location="classpath:datasource.properties"/>

    <!-- 配置dataSource属性 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <!--
            初始化连接大小
            <property name="initialSize" value="${initialSize}"></property>
            连接池最大数量
            <property name="maxActive" value="${maxActive}"></property>
            连接池最大空闲
            <property name="maxIdle" value="${maxIdle}"></property>
            连接池最小空闲
            <property name="minIdle" value="${minIdle}"></property>
            获取连接最大等待时间
            <property name="maxWait" value="${maxWait}"></property>
        -->
    </bean>

    <!-- 配置sqlSessionFactoryBean -->
    <!-- 引入mybatis文件，使mybatis和spring整合在一起，需要导入mybatis-spring的jar包 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- myBatis的配置文件的路径 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径.
             *是个通配符，代表所有的文件，**代表所有目录下 -->
        <property name="mapperLocations" value="classpath:com/mg/dao/mapper/*.xml"/>
    </bean>

    <!-- 配置mapper自动扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 这里会重复扫描，dao层的接口实现类不能加@Repository注解 -->
        <property name="basePackage" value="com.mg.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 注解扫描 -->
    <context:component-scan base-package="com.mg">
        <!-- 排除controller层的注解扫描，这是第二步，第一步要在web.xml中加入监听器 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- JdbcTemplate依赖注入 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 数据库的事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 事务管理，事务出现异常回滚 -->
    <tx:advice id="advisor">
        <tx:attributes>
            <!--
            name是需要回滚的方法
            rollback-for是发生什么异常时回滚
            propagation有七种配置，REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER、NESTED。默认是REQUIRED。

            下面是Spring中Propagation类的事务属性详解：
                REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
                SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。
                MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。
                REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。
                NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
                NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
                NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。
            -->
            <tx:method name="*" rollback-for="Exception" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 缓存的注解驱动 -->
    <cache:annotation-driven/>

    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
                    <!-- value里的值userInfo是在service层的带有@Cacheable注解的方法，在这里需要引入进来 -->
                    <property name="name" value="userInfo"></property>
                </bean>
                <!-- 每需要增加一个@Cacheable和@CacheEvict,必须新增一个bean重写 -->
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
                    <property name="name" value="cacheTest"></property>
                </bean>
            </set>
        </property>
    </bean>

    <!--WebSocket整合-->
    <!--配置websocket处理器-->
    <bean id="websocket" class="com.mg.core.WebSocketHandler"/>
    <websocket:handlers>
        <websocket:mapping path="/websocket" handler="websocket"/>
        <!--配置websocket拦截器-->
        <websocket:handshake-interceptors>
            <bean class="com.mg.interceptor.WebSocketInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>
</beans>
